let chart,annotation1={id:"e-p-anno",shapes:[{point:{xAxis:0,yAxis:0,x:Date.UTC(2020,3,1),y:69.67},type:"circle",r:8},{point:{xAxis:0,yAxis:0,x:Date.UTC(2020,1,1),y:80.45},type:"circle",r:8},{points:[{xAxis:0,yAxis:0,x:Date.UTC(2020,3,1),y:69.67},{xAxis:0,yAxis:0,x:Date.UTC(2e3,1,1),y:69.67}],type:"path"},,{points:[{xAxis:0,yAxis:0,x:Date.UTC(2020,1,1),y:80.45},{xAxis:0,yAxis:0,x:Date.UTC(2001,7,1),y:80.45}],type:"path"}]},annotation2={id:"gender-anno",labels:[{text:"Men",align:"left",className:"men-primary",point:{x:Date.UTC(2019,0,1),y:66,xAxis:0,yAxis:0}},{text:"Women",align:"left",className:"women-primary",point:{x:Date.UTC(2019,0,1),y:55,xAxis:0,yAxis:0}}]},annotation3={id:"parent-anno",labelOptions:{backgroundColor:"white"},labels:[{text:"Fathers",align:"left",className:"men-primary",point:{x:Date.UTC(2019,0,1),y:91,xAxis:0,yAxis:0}},{text:"Mothers",align:"left",className:"women-primary",point:{x:Date.UTC(2019,0,1),y:77.5,xAxis:0,yAxis:0}},{text:"Youngest child aged 13-17",align:"left",className:"women-secondary-1",point:{x:Date.UTC(2019,0,1),y:74.5,xAxis:0,yAxis:0}},{text:"Aged 5-12",align:"left",className:"women-secondary-2",point:{x:Date.UTC(2019,0,1),y:67.5,xAxis:0,yAxis:0}},{text:"Under 5",align:"left",className:"women-secondary-3",point:{x:Date.UTC(2019,0,1),y:61.5,xAxis:0,yAxis:0}}]},annotation4={id:"lfp-anno",labels:[{text:"Men",className:"men-primary",point:{x:Date.UTC(2020,7,1),y:-2.35,xAxis:0,yAxis:0}},{text:"Women",className:"women-primary",point:{x:Date.UTC(2020,7,1),y:-4.25,xAxis:0,yAxis:0}}],animation:{duration:2e3}};$(".chart-area-womens-recession-intro").parent().css("overflow","visible"),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("TwoStep",[],t):"object"==typeof exports?exports.TwoStep=t():e.TwoStep=t()}(this,function(){return function(e){function t(a){if(n[a])return n[a].exports;var i=n[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[40,32,39,34].indexOf(e)>-1?1:[37,38,33].indexOf(e)>-1?-1:0},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=function(){function e(){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.instances=[]}return a(e,[{key:"register",value:function(e){return this.instances.push(e),this}},{key:"getActiveInstances",value:function(){return this.instances.filter(function(e){return e.enabled})}}]),e}();t.default=i,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=a(n(0)),r=new(a(n(1)).default),s=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),0===t.elements.length)throw"Elements array is empty";if(t.narrative){if(t.elements.length!==t.narrative.length)throw"Elements and narrative are different lengths";if(!1==!t.narrative.filter(function(e){return"function"!=typeof e}).length)throw"Narrative contains non-functions";this.narrative=t.narrative}this.onChange=t.onChange,this.elements=Array.prototype.slice.call(t.elements),this.enabled=!0,this.offset=t.hasOwnProperty("offset")?t.offset:{down:"50%",up:"0"};var n=this.setWaypoints(this.elements,function(e){if("down"==e){var t=i.elements.indexOf(this.element);t!==this.index&&i.goTo(t,!1,e)}},t.continuous,this.offset.down),a=this.setWaypoints(this.elements,function(e){if("up"==e){var t=i.elements.indexOf(this.element);t!==this.index&&i.goTo(t,!1,e)}},t.continuous,this.offset.up);if(this.waypoints=[n,a],t.stick){if(void 0===$().fixTo)throw"fixTo is not present on the page, or may have been loaded in before jQuery.";$(t.stick).wrapInner('<div class="two-step-sticky-wrapper"></div>'),this.sticky=$(t.stick).find(".two-step-sticky-wrapper").fixTo($(t.stick))}this.setKeyboard(),this.index=-1,r.register(this),setInterval(function(){Waypoint.refreshAll()},1e3);var i=this}return i(e,[{key:"goTo",value:function(e,t,n){var a=this;if(!1===this.isValidIndex(e))throw e+" is not a valid index. Must be between 0 and "+(this.elements.length-1)+" (inclusive).";this.narrative&&this.narrative[e]({element:this.elements[e],index:e,direction:n}),this.onChange&&this.onChange({element:this.elements[e],index:e,direction:n}),this.index=e;var i=$(this.elements).eq(e);return $(this.elements).removeClass("active"),i.addClass("active"),!0===t?(this.disableWaypoints(),$("html, body").animate({scrollTop:i.offset().top-100},500).promise().then(function(){a.enableWaypoints()})):$.Deferred().resolve()}},{key:"setWaypoints",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=arguments[3];return e.map(function(e){return new Waypoint({element:e,handler:t,continuous:n,offset:a})})}},{key:"setKeyboard",value:function(){var e=this;$(window).keydown(function(t){if(e.disabled)return!0;var n=(0,o.default)(t.keyCode),a=r.getActiveInstances();if(0!==n&&t.target===document.body&&!1===t.metaKey&&1===a.length){var i=e.index+n;return!e.isValidIndex(i)||(e.goTo(i,!0),t.preventDefault(),!1)}})}},{key:"isValidIndex",value:function(e){return e<this.elements.length&&e>-1}},{key:"disableWaypoints",value:function(){[].concat.apply([],this.waypoints).forEach(function(e){return e.disable()})}},{key:"enableWaypoints",value:function(){[].concat.apply([],this.waypoints).forEach(function(e){return e.enable()})}},{key:"disable",value:function(){this.disabled=!0,this.enabled=!1,this.disableWaypoints(),this.sticky&&this.sticky.fixTo("stop")}},{key:"enable",value:function(){this.disabled=!1,this.enabled=!0,this.enableWaypoints(),this.sticky&&this.sticky.fixTo("start")}}]),e}();t.default=s,e.exports=t.default}])});var ts=new TwoStep({elements:document.querySelectorAll(".parent .narrative-item"),onChange:function(e){console.log("Item "+e.index)},stick:document.querySelector(".parent .sticky-outer"),narrative:[function(e){$(".chart-title").text("Percent of people 25-54 who are employed"),$(".chart-source").text("Federal Reserve Bank of St. Louis"),chart.removeAnnotation("gender-anno"),chart.removeAnnotation("parent-anno"),chart.removeAnnotation("lfp-anno"),setTimeout(function(){chart.addAnnotation(annotation1)},500),chart.update({chart:{type:"area"},data:{csvURL:"https://raw.githubusercontent.com/kschmidt2/grow-womens-recession-intro/master/app/data/e-p-rate.csv"},yAxis:{min:60,max:85}})},function(e){chart.removeAnnotation("parent-anno"),chart.removeAnnotation("lfp-anno"),chart.removeAnnotation("e-p-anno"),setTimeout(function(){chart.addAnnotation(annotation2)},500),$(".chart-title").text("Percent of people who are employed"),$(".chart-source").text("Federal Reserve Bank of St. Louis"),chart.update({chart:{type:"line"},data:{csvURL:"https://raw.githubusercontent.com/kschmidt2/grow-womens-recession-intro/master/app/data/e-p-gender.csv"},yAxis:{min:45,max:70}})},function(e){chart.removeAnnotation("gender-anno"),chart.removeAnnotation("e-p-anno"),chart.removeAnnotation("lfp-anno"),setTimeout(function(){chart.addAnnotation(annotation3)},500),$(".chart-title").text("Percent of people who are employed"),$(".chart-source").text("Current Population Survey via IPUMS"),chart.update({chart:{type:"line"},data:{csvURL:"https://raw.githubusercontent.com/kschmidt2/grow-womens-recession-intro/master/app/data/e-p-parents.csv"},yAxis:{min:50,max:100}})},function(e){chart.removeAnnotation("gender-anno"),chart.removeAnnotation("parent-anno"),chart.removeAnnotation("e-p-anno"),setTimeout(function(){chart.addAnnotation(annotation4)},500),$(".highcharts-grid-line:nth-child(5)").css("stroke","black"),$(".chart-title").text("Change in labor force participation since February"),$(".chart-source").text("Federal Reserve Bank of St. Louis"),chart.update({chart:{type:"line"},data:{csvURL:"https://raw.githubusercontent.com/kschmidt2/grow-womens-recession-intro/master/app/data/lfl-gender.csv"},yAxis:{min:-8,max:2}})}],offset:{up:"-10%",down:"100%"}});function drawHighcharts(){chart=Highcharts.chart("chart-container-intro",{chart:{type:"area",styledMode:!0,spacingBottom:25,spacingRight:25,spacingLeft:5,spacingTop:20,animation:{duration:1e3}},title:{text:null},data:{csvURL:"https://raw.githubusercontent.com/kschmidt2/grow-womens-recession-intro/master/app/data/e-p-rate.csv"},annotations:[{}],plotOptions:{series:{animation:{duration:1e3,defer:1e3},lineWidth:1,states:{hover:{enabled:!1}},marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5,plotBands:[{from:Date.UTC(2020,1,1),to:Date.UTC(2020,9,30),label:{text:"Pandemic",textAlign:"center"}}]},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:60,max:85,tickAmount:6,tickLength:25,tickPosition:"inside"},credits:{enabled:!1},tooltip:{enabled:!1},defs:{gradient0:{tagName:"linearGradient",id:"gradient-0",x1:0,y1:0,x2:0,y2:1,children:[{tagName:"stop",offset:0},{tagName:"stop",offset:1}]}},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:25,spacingLeft:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}Highcharts.setOptions({lang:{thousandsSep:","}}),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
