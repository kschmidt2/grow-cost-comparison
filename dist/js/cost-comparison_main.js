!function(e,t,n){function i(e,t){return typeof e===t}var r=[],a=[],o={_version:"3.6.0",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){a.push({name:e,fn:t,options:n})},addAsyncTest:function(e){a.push({name:null,fn:e})}},s=function(){};s.prototype=o,(s=new s).addTest("devicemotion","DeviceMotionEvent"in e),s.addTest("deviceorientation","DeviceOrientationEvent"in e);var c=t.documentElement,u="svg"===c.nodeName.toLowerCase();(function(){var e,t,n,o,c,u;for(var l in a)if(a.hasOwnProperty(l)){if(e=[],(t=a[l]).name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(o=i(t.fn,"function")?t.fn():t.fn,c=0;c<e.length;c++)1===(u=e[c].split(".")).length?s[u[0]]=o:(!s[u[0]]||s[u[0]]instanceof Boolean||(s[u[0]]=new Boolean(s[u[0]])),s[u[0]][u[1]]=o),r.push((o?"":"no-")+u.join("-"))}})(),function(e){var t=c.className,n=s._config.classPrefix||"";if(u&&(t=t.baseVal),s._config.enableJSClass){var i=new RegExp("(^|\\s)"+n+"no-js(\\s|$)");t=t.replace(i,"$1"+n+"js$2")}s._config.enableClasses&&(t+=" "+n+e.join(" "+n),u?c.className.baseVal=t:c.className=t)}(r),delete o.addTest,delete o.addAsyncTest;for(var l=0;l<s._q.length;l++)s._q[l]();e.Modernizr=s}(window,document),Modernizr.devicemotion?console.log("supported"):console.log("not supported");let chartJ,chartL,jacobMax=3420,lisaMax=3040,annotationJ={id:"j-anno",labels:[{text:"84% spent",point:{x:0,y:1979,xAxis:0,yAxis:0},y:15,overflow:"allow"}],animation:{defer:10}},annotationL={id:"l-anno",labels:[{text:"75% spent",point:{x:0,y:1903,xAxis:0,yAxis:0},y:15,overflow:"allow"}],animation:{defer:10}};!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("TwoStep",[],t):"object"==typeof exports?exports.TwoStep=t():e.TwoStep=t()}(this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[40,32,39,34].indexOf(e)>-1?1:[37,38,33].indexOf(e)>-1?-1:0},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.instances=[]}return i(e,[{key:"register",value:function(e){return this.instances.push(e),this}},{key:"getActiveInstances",value:function(){return this.instances.filter(function(e){return e.enabled})}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=i(n(0)),o=new(i(n(1)).default),s=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),0===t.elements.length)throw"Elements array is empty";if(t.narrative){if(t.elements.length!==t.narrative.length)throw"Elements and narrative are different lengths";if(!1==!t.narrative.filter(function(e){return"function"!=typeof e}).length)throw"Narrative contains non-functions";this.narrative=t.narrative}this.onChange=t.onChange,this.elements=Array.prototype.slice.call(t.elements),this.enabled=!0,this.offset=t.hasOwnProperty("offset")?t.offset:{down:"50%",up:"0"};var n=this.setWaypoints(this.elements,function(e){if("down"==e){var t=r.elements.indexOf(this.element);t!==this.index&&r.goTo(t,!1,e)}},t.continuous,this.offset.down),i=this.setWaypoints(this.elements,function(e){if("up"==e){var t=r.elements.indexOf(this.element);t!==this.index&&r.goTo(t,!1,e)}},t.continuous,this.offset.up);if(this.waypoints=[n,i],t.stick){if(void 0===$().fixTo)throw"fixTo is not present on the page, or may have been loaded in before jQuery.";$(t.stick).wrapInner('<div class="two-step-sticky-wrapper"></div>'),this.sticky=$(t.stick).find(".two-step-sticky-wrapper").fixTo($(t.stick))}this.setKeyboard(),this.index=-1,o.register(this),setInterval(function(){Waypoint.refreshAll()},1e3);var r=this}return r(e,[{key:"goTo",value:function(e,t,n){var i=this;if(!1===this.isValidIndex(e))throw e+" is not a valid index. Must be between 0 and "+(this.elements.length-1)+" (inclusive).";this.narrative&&this.narrative[e]({element:this.elements[e],index:e,direction:n}),this.onChange&&this.onChange({element:this.elements[e],index:e,direction:n}),this.index=e;var r=$(this.elements).eq(e);return $(this.elements).removeClass("active"),r.addClass("active"),!0===t?(this.disableWaypoints(),$("html, body").animate({scrollTop:r.offset().top-100},500).promise().then(function(){i.enableWaypoints()})):$.Deferred().resolve()}},{key:"setWaypoints",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=arguments[3];return e.map(function(e){return new Waypoint({element:e,handler:t,continuous:n,offset:i})})}},{key:"setKeyboard",value:function(){var e=this;$(window).keydown(function(t){if(e.disabled)return!0;var n=(0,a.default)(t.keyCode),i=o.getActiveInstances();if(0!==n&&t.target===document.body&&!1===t.metaKey&&1===i.length){var r=e.index+n;return!e.isValidIndex(r)||(e.goTo(r,!0),t.preventDefault(),!1)}})}},{key:"isValidIndex",value:function(e){return e<this.elements.length&&e>-1}},{key:"disableWaypoints",value:function(){[].concat.apply([],this.waypoints).forEach(function(e){return e.disable()})}},{key:"enableWaypoints",value:function(){[].concat.apply([],this.waypoints).forEach(function(e){return e.enable()})}},{key:"disable",value:function(){this.disabled=!0,this.enabled=!1,this.disableWaypoints(),this.sticky&&this.sticky.fixTo("stop")}},{key:"enable",value:function(){this.disabled=!1,this.enabled=!0,this.enableWaypoints(),this.sticky&&this.sticky.fixTo("start")}}]),e}();t.default=s,e.exports=t.default}])});var ts=new TwoStep({elements:document.querySelectorAll(".parent .narrative-item"),onChange:function(e){console.log("Item "+e.index)},stick:document.querySelector(".parent .sticky-outer"),narrative:[function(e){$(".lisa-illo").fadeOut(500)},function(e){$(".lisa-illo").fadeIn(500)},function(e){$(".chart-title").text(""),$(".money-info").fadeOut(500),chartJ.update({series:{data:[0]}}),chartL.update({series:{data:[0]}})},function(e){$(".money-info").fadeIn(500),$(".chart-title").text("Monthly income"),$("#jacobs-money").text("$3,420"),$("#lisas-money").text("$3,040"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[jacobMax]},yAxis:{plotBands:[{from:0,to:jacobMax}]}}),chartL.update({series:{data:[lisaMax]},yAxis:{plotBands:[{from:0,to:lisaMax}]}})},function(e){chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno")},function(e){$(".chart-title").text("Monthly take-home pay"),$("#jacobs-money").text("$3,070"),$("#lisas-money").text("$2,700"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[3070]}}),chartL.update({series:{data:[2700]}})},function(e){$(".chart-title").text("After student-loan payments"),$("#jacobs-money").text("$2,764"),$("#lisas-money").text("$2,510"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[2764]}}),chartL.update({series:{data:[2510]}})},function(e){$(".chart-title").text("After rent and utilities"),$("#jacobs-money").text("$2,019"),$("#lisas-money").text("$1,964"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[2019]}}),chartL.update({series:{data:[1964]}})},function(e){$(".chart-title").text("After transportation costs"),$("#jacobs-money").text("$1,639"),$("#lisas-money").text("$1,656"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[1639]}}),chartL.update({series:{data:[1656]}})},function(e){$(".chart-title").text("After groceries and personal care"),$("#jacobs-money").text("$931"),$("#lisas-money").text("$977"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[931]}}),chartL.update({series:{data:[977]}})},function(e){$(".chart-title").text("After retirement contributions"),$("#jacobs-money").text("$662"),$("#lisas-money").text("$823"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[662]}}),chartL.update({series:{data:[823]}})},function(e){$(".chart-title").text("After health-care expenses"),$("#jacobs-money").text("$539"),$("#lisas-money").text("$766"),chartJ.removeAnnotation("j-anno"),chartL.removeAnnotation("l-anno"),chartJ.update({series:{data:[539]}}),chartL.update({series:{data:[766]}})},function(e){$(".chart-title").text("Remainder"),chartJ.addAnnotation(annotationJ),chartL.addAnnotation(annotationL)}],offset:{up:"5%",down:"70%"}}),requirejs,require,define;function drawHighcharts(){chartJ=Highcharts.chart("chart-container-jacob",{chart:{type:"bar",styledMode:!0,spacingBottom:0,spacingRight:50,spacingLeft:0,spacingTop:0,animation:{duration:1e3}},title:{text:null},series:[{data:[0]}],plotOptions:{series:{groupPadding:-2}},legend:{enabled:!1},xAxis:{labels:{enabled:!1,style:{whiteSpace:"nowrap"}},tickLength:5,type:"category"},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow",format:"${text}",step:4,align:"right",x:0,y:18},tickAmount:5,tickLength:25,tickPosition:"inside",max:4e3,gridZIndex:5},credits:{enabled:!1},tooltip:{enabled:!1},responsive:{rules:[{condition:{maxWidth:250},chartOptions:{chart:{spacingRight:20},tooltip:{enabled:!1}}}]}}),chartL=Highcharts.chart("chart-container-lisa",{chart:{type:"bar",styledMode:!0,spacingBottom:0,spacingRight:0,spacingLeft:50,spacingTop:0,animation:{duration:1e3}},title:{text:null},series:[{data:[0]}],plotOptions:{series:{groupPadding:-2}},legend:{enabled:!1},xAxis:{labels:{enabled:!1,style:{whiteSpace:"nowrap"}},tickLength:5,type:"category"},yAxis:{title:!1,reversed:!0,labels:{useHTML:!0,overflow:"allow",format:"${text}",step:4,align:"right",x:0,y:18},tickAmount:5,tickLength:25,tickPosition:"inside",max:4e3,gridZIndex:5},credits:{enabled:!1},tooltip:{enabled:!1},responsive:{rules:[{condition:{maxWidth:250},chartOptions:{chart:{spacingLeft:20},tooltip:{enabled:!1}}}]}})}Highcharts.setOptions({lang:{thousandsSep:","}}),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts),function(global,setTimeout){var req,s,head,baseElement,dataMain,src,interactiveScript,currentlyAddingScript,mainScript,subPath,version="2.3.6",commentRegExp=/\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/gm,cjsRequireRegExp=/[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,jsSuffixRegExp=/\.js$/,currDirRegExp=/^\.\//,op=Object.prototype,ostring=op.toString,hasOwn=op.hasOwnProperty,isBrowser=!("undefined"==typeof window||"undefined"==typeof navigator||!window.document),isWebWorker=!isBrowser&&"undefined"!=typeof importScripts,readyRegExp=isBrowser&&"PLAYSTATION 3"===navigator.platform?/^complete$/:/^(complete|loaded)$/,defContextName="_",isOpera="undefined"!=typeof opera&&"[object Opera]"===opera.toString(),contexts={},cfg={},globalDefQueue=[],useInteractive=!1;function commentReplace(e,t){return t||""}function isFunction(e){return"[object Function]"===ostring.call(e)}function isArray(e){return"[object Array]"===ostring.call(e)}function each(e,t){var n;if(e)for(n=0;n<e.length&&(!e[n]||!t(e[n],n,e));n+=1);}function eachReverse(e,t){var n;if(e)for(n=e.length-1;n>-1&&(!e[n]||!t(e[n],n,e));n-=1);}function hasProp(e,t){return hasOwn.call(e,t)}function getOwn(e,t){return hasProp(e,t)&&e[t]}function eachProp(e,t){var n;for(n in e)if(hasProp(e,n)&&t(e[n],n))break}function mixin(e,t,n,i){return t&&eachProp(t,function(t,r){!n&&hasProp(e,r)||(!i||"object"!=typeof t||!t||isArray(t)||isFunction(t)||t instanceof RegExp?e[r]=t:(e[r]||(e[r]={}),mixin(e[r],t,n,i)))}),e}function bind(e,t){return function(){return t.apply(e,arguments)}}function scripts(){return document.getElementsByTagName("script")}function defaultOnError(e){throw e}function getGlobal(e){if(!e)return e;var t=global;return each(e.split("."),function(e){t=t[e]}),t}function makeError(e,t,n,i){var r=new Error(t+"\nhttps://requirejs.org/docs/errors.html#"+e);return r.requireType=e,r.requireModules=i,n&&(r.originalError=n),r}if(void 0===define){if(void 0!==requirejs){if(isFunction(requirejs))return;cfg=requirejs,requirejs=void 0}void 0===require||isFunction(require)||(cfg=require,require=void 0),req=requirejs=function(e,t,n,i){var r,a,o=defContextName;return isArray(e)||"string"==typeof e||(a=e,isArray(t)?(e=t,t=n,n=i):e=[]),a&&a.context&&(o=a.context),(r=getOwn(contexts,o))||(r=contexts[o]=req.s.newContext(o)),a&&r.configure(a),r.require(e,t,n)},req.config=function(e){return req(e)},req.nextTick=void 0!==setTimeout?function(e){setTimeout(e,4)}:function(e){e()},require||(require=req),req.version=version,req.jsExtRegExp=/^\/|:|\?|\.js$/,req.isBrowser=isBrowser,s=req.s={contexts:contexts,newContext:newContext},req({}),each(["toUrl","undef","defined","specified"],function(e){req[e]=function(){var t=contexts[defContextName];return t.require[e].apply(t,arguments)}}),isBrowser&&(head=s.head=document.getElementsByTagName("head")[0],baseElement=document.getElementsByTagName("base")[0],baseElement&&(head=s.head=baseElement.parentNode)),req.onError=defaultOnError,req.createNode=function(e,t,n){var i=e.xhtml?document.createElementNS("http://www.w3.org/1999/xhtml","html:script"):document.createElement("script");return i.type=e.scriptType||"text/javascript",i.charset="utf-8",i.async=!0,i},req.load=function(e,t,n){var i,r=e&&e.config||{};if(isBrowser)return(i=req.createNode(r,t,n)).setAttribute("data-requirecontext",e.contextName),i.setAttribute("data-requiremodule",t),!i.attachEvent||i.attachEvent.toString&&i.attachEvent.toString().indexOf("[native code")<0||isOpera?(i.addEventListener("load",e.onScriptLoad,!1),i.addEventListener("error",e.onScriptError,!1)):(useInteractive=!0,i.attachEvent("onreadystatechange",e.onScriptLoad)),i.src=n,r.onNodeCreated&&r.onNodeCreated(i,r,t,n),currentlyAddingScript=i,baseElement?head.insertBefore(i,baseElement):head.appendChild(i),currentlyAddingScript=null,i;if(isWebWorker)try{setTimeout(function(){},0),importScripts(n),e.completeLoad(t)}catch(i){e.onError(makeError("importscripts","importScripts failed for "+t+" at "+n,i,[t]))}},isBrowser&&!cfg.skipDataMain&&eachReverse(scripts(),function(e){if(head||(head=e.parentNode),dataMain=e.getAttribute("data-main"))return mainScript=dataMain,cfg.baseUrl||-1!==mainScript.indexOf("!")||(src=mainScript.split("/"),mainScript=src.pop(),subPath=src.length?src.join("/")+"/":"./",cfg.baseUrl=subPath),mainScript=mainScript.replace(jsSuffixRegExp,""),req.jsExtRegExp.test(mainScript)&&(mainScript=dataMain),cfg.deps=cfg.deps?cfg.deps.concat(mainScript):[mainScript],!0}),define=function(e,t,n){var i,r;"string"!=typeof e&&(n=t,t=e,e=null),isArray(t)||(n=t,t=null),!t&&isFunction(n)&&(t=[],n.length&&(n.toString().replace(commentRegExp,commentReplace).replace(cjsRequireRegExp,function(e,n){t.push(n)}),t=(1===n.length?["require"]:["require","exports","module"]).concat(t))),useInteractive&&(i=currentlyAddingScript||getInteractiveScript())&&(e||(e=i.getAttribute("data-requiremodule")),r=contexts[i.getAttribute("data-requirecontext")]),r?(r.defQueue.push([e,t,n]),r.defQueueMap[e]=!0):globalDefQueue.push([e,t,n])},define.amd={jQuery:!0},req.exec=function(text){return eval(text)},req(cfg)}function newContext(e){var t,n,i,r,a,o={waitSeconds:7,baseUrl:"./",paths:{},bundles:{},pkgs:{},shim:{},config:{}},s={},c={},u={},l=[],d={},f={},p={},h=1,m=1;function g(e,t,n){var i,r,a,s,c,u,l,d,f,p,h=t&&t.split("/"),m=o.map,g=m&&m["*"];if(e&&(u=(e=e.split("/")).length-1,o.nodeIdCompat&&jsSuffixRegExp.test(e[u])&&(e[u]=e[u].replace(jsSuffixRegExp,"")),"."===e[0].charAt(0)&&h&&(e=h.slice(0,h.length-1).concat(e)),function(e){var t,n;for(t=0;t<e.length;t++)if("."===(n=e[t]))e.splice(t,1),t-=1;else if(".."===n){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}(e),e=e.join("/")),n&&m&&(h||g)){e:for(a=(r=e.split("/")).length;a>0;a-=1){if(c=r.slice(0,a).join("/"),h)for(s=h.length;s>0;s-=1)if((i=getOwn(m,h.slice(0,s).join("/")))&&(i=getOwn(i,c))){l=i,d=a;break e}!f&&g&&getOwn(g,c)&&(f=getOwn(g,c),p=a)}!l&&f&&(l=f,d=p),l&&(r.splice(0,d,l),e=r.join("/"))}return getOwn(o.pkgs,e)||e}function v(e){isBrowser&&each(scripts(),function(t){if(t.getAttribute("data-requiremodule")===e&&t.getAttribute("data-requirecontext")===i.contextName)return t.parentNode.removeChild(t),!0})}function x(e){var t=getOwn(o.paths,e);if(t&&isArray(t)&&t.length>1)return t.shift(),i.require.undef(e),i.makeRequire(null,{skipMap:!0})([e]),!0}function b(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function y(e,t,n,r){var a,o,s,c,u=null,l=t?t.name:null,f=e,p=!0,v="";return e||(p=!1,e="_@r"+(h+=1)),u=(c=b(e))[0],e=c[1],u&&(u=g(u,l,r),o=getOwn(d,u)),e&&(u?v=n?e:o&&o.normalize?o.normalize(e,function(e){return g(e,l,r)}):-1===e.indexOf("!")?g(e,l,r):e:(u=(c=b(v=g(e,l,r)))[0],v=c[1],n=!0,a=i.nameToUrl(v))),{prefix:u,name:v,parentMap:t,unnormalized:!!(s=!u||o||n?"":"_unnormalized"+(m+=1)),url:a,originalName:f,isDefine:p,id:(u?u+"!"+v:v)+s}}function w(e){var t=e.id,n=getOwn(s,t);return n||(n=s[t]=new i.Module(e)),n}function k(e,t,n){var i=e.id,r=getOwn(s,i);!hasProp(d,i)||r&&!r.defineEmitComplete?(r=w(e)).error&&"error"===t?n(r.error):r.on(t,n):"defined"===t&&n(d[i])}function q(e,t){var n=e.requireModules,i=!1;t?t(e):(each(n,function(t){var n=getOwn(s,t);n&&(n.error=e,n.events.error&&(i=!0,n.emit("error",e)))}),i||req.onError(e))}function E(){globalDefQueue.length&&(each(globalDefQueue,function(e){var t=e[0];"string"==typeof t&&(i.defQueueMap[t]=!0),l.push(e)}),globalDefQueue=[])}function A(e){delete s[e],delete c[e]}function M(){var e,n,r=1e3*o.waitSeconds,u=r&&i.startTime+r<(new Date).getTime(),l=[],f=[],p=!1,h=!0;if(!t){if(t=!0,eachProp(c,function(e){var t=e.map,i=t.id;if(e.enabled&&(t.isDefine||f.push(e),!e.error))if(!e.inited&&u)x(i)?(n=!0,p=!0):(l.push(i),v(i));else if(!e.inited&&e.fetched&&t.isDefine&&(p=!0,!t.prefix))return h=!1}),u&&l.length)return(e=makeError("timeout","Load timeout for modules: "+l,null,l)).contextName=i.contextName,q(e);h&&each(f,function(e){!function e(t,n,i){var r=t.map.id;t.error?t.emit("error",t.error):(n[r]=!0,each(t.depMaps,function(r,a){var o=r.id,c=getOwn(s,o);!c||t.depMatched[a]||i[o]||(getOwn(n,o)?(t.defineDep(a,d[o]),t.check()):e(c,n,i))}),i[r]=!0)}(e,{},{})}),u&&!n||!p||!isBrowser&&!isWebWorker||a||(a=setTimeout(function(){a=0,M()},50)),t=!1}}function j(e){hasProp(d,e[0])||w(y(e[0],null,!0)).init(e[1],e[2])}function O(e,t,n,i){e.detachEvent&&!isOpera?i&&e.detachEvent(i,t):e.removeEventListener(n,t,!1)}function S(e){var t=e.currentTarget||e.srcElement;return O(t,i.onScriptLoad,"load","onreadystatechange"),O(t,i.onScriptError,"error"),{node:t,id:t&&t.getAttribute("data-requiremodule")}}function $(){var e;for(E();l.length;){if(null===(e=l.shift())[0])return q(makeError("mismatch","Mismatched anonymous define() module: "+e[e.length-1]));j(e)}i.defQueueMap={}}return r={require:function(e){return e.require?e.require:e.require=i.makeRequire(e.map)},exports:function(e){if(e.usingExports=!0,e.map.isDefine)return e.exports?d[e.map.id]=e.exports:e.exports=d[e.map.id]={}},module:function(e){return e.module?e.module:e.module={id:e.map.id,uri:e.map.url,config:function(){return getOwn(o.config,e.map.id)||{}},exports:e.exports||(e.exports={})}}},(n=function(e){this.events=getOwn(u,e.id)||{},this.map=e,this.shim=getOwn(o.shim,e.id),this.depExports=[],this.depMaps=[],this.depMatched=[],this.pluginMaps={},this.depCount=0}).prototype={init:function(e,t,n,i){i=i||{},this.inited||(this.factory=t,n?this.on("error",n):this.events.error&&(n=bind(this,function(e){this.emit("error",e)})),this.depMaps=e&&e.slice(0),this.errback=n,this.inited=!0,this.ignore=i.ignore,i.enabled||this.enabled?this.enable():this.check())},defineDep:function(e,t){this.depMatched[e]||(this.depMatched[e]=!0,this.depCount-=1,this.depExports[e]=t)},fetch:function(){if(!this.fetched){this.fetched=!0,i.startTime=(new Date).getTime();var e=this.map;if(!this.shim)return e.prefix?this.callPlugin():this.load();i.makeRequire(this.map,{enableBuildCallback:!0})(this.shim.deps||[],bind(this,function(){return e.prefix?this.callPlugin():this.load()}))}},load:function(){var e=this.map.url;f[e]||(f[e]=!0,i.load(this.map.id,e))},check:function(){if(this.enabled&&!this.enabling){var e,t,n=this.map.id,r=this.depExports,a=this.exports,o=this.factory;if(this.inited){if(this.error)this.emit("error",this.error);else if(!this.defining){if(this.defining=!0,this.depCount<1&&!this.defined){if(isFunction(o)){if(this.events.error&&this.map.isDefine||req.onError!==defaultOnError)try{a=i.execCb(n,o,r,a)}catch(t){e=t}else a=i.execCb(n,o,r,a);if(this.map.isDefine&&void 0===a&&((t=this.module)?a=t.exports:this.usingExports&&(a=this.exports)),e)return e.requireMap=this.map,e.requireModules=this.map.isDefine?[this.map.id]:null,e.requireType=this.map.isDefine?"define":"require",q(this.error=e)}else a=o;if(this.exports=a,this.map.isDefine&&!this.ignore&&(d[n]=a,req.onResourceLoad)){var s=[];each(this.depMaps,function(e){s.push(e.normalizedMap||e)}),req.onResourceLoad(i,this.map,s)}A(n),this.defined=!0}this.defining=!1,this.defined&&!this.defineEmitted&&(this.defineEmitted=!0,this.emit("defined",this.exports),this.defineEmitComplete=!0)}}else hasProp(i.defQueueMap,n)||this.fetch()}},callPlugin:function(){var e=this.map,t=e.id,n=y(e.prefix);this.depMaps.push(n),k(n,"defined",bind(this,function(n){var r,a,c,u=getOwn(p,this.map.id),l=this.map.name,d=this.map.parentMap?this.map.parentMap.name:null,f=i.makeRequire(e.parentMap,{enableBuildCallback:!0});return this.map.unnormalized?(n.normalize&&(l=n.normalize(l,function(e){return g(e,d,!0)})||""),k(a=y(e.prefix+"!"+l,this.map.parentMap,!0),"defined",bind(this,function(e){this.map.normalizedMap=a,this.init([],function(){return e},null,{enabled:!0,ignore:!0})})),void((c=getOwn(s,a.id))&&(this.depMaps.push(a),this.events.error&&c.on("error",bind(this,function(e){this.emit("error",e)})),c.enable()))):u?(this.map.url=i.nameToUrl(u),void this.load()):((r=bind(this,function(e){this.init([],function(){return e},null,{enabled:!0})})).error=bind(this,function(e){this.inited=!0,this.error=e,e.requireModules=[t],eachProp(s,function(e){0===e.map.id.indexOf(t+"_unnormalized")&&A(e.map.id)}),q(e)}),r.fromText=bind(this,function(n,a){var s=e.name,c=y(s),u=useInteractive;a&&(n=a),u&&(useInteractive=!1),w(c),hasProp(o.config,t)&&(o.config[s]=o.config[t]);try{req.exec(n)}catch(e){return q(makeError("fromtexteval","fromText eval for "+t+" failed: "+e,e,[t]))}u&&(useInteractive=!0),this.depMaps.push(c),i.completeLoad(s),f([s],r)}),void n.load(e.name,f,r,o))})),i.enable(n,this),this.pluginMaps[n.id]=n},enable:function(){c[this.map.id]=this,this.enabled=!0,this.enabling=!0,each(this.depMaps,bind(this,function(e,t){var n,a,o;if("string"==typeof e){if(e=y(e,this.map.isDefine?this.map:this.map.parentMap,!1,!this.skipMap),this.depMaps[t]=e,o=getOwn(r,e.id))return void(this.depExports[t]=o(this));this.depCount+=1,k(e,"defined",bind(this,function(e){this.undefed||(this.defineDep(t,e),this.check())})),this.errback?k(e,"error",bind(this,this.errback)):this.events.error&&k(e,"error",bind(this,function(e){this.emit("error",e)}))}n=e.id,a=s[n],hasProp(r,n)||!a||a.enabled||i.enable(e,this)})),eachProp(this.pluginMaps,bind(this,function(e){var t=getOwn(s,e.id);t&&!t.enabled&&i.enable(e,this)})),this.enabling=!1,this.check()},on:function(e,t){var n=this.events[e];n||(n=this.events[e]=[]),n.push(t)},emit:function(e,t){each(this.events[e],function(e){e(t)}),"error"===e&&delete this.events[e]}},(i={config:o,contextName:e,registry:s,defined:d,urlFetched:f,defQueue:l,defQueueMap:{},Module:n,makeModuleMap:y,nextTick:req.nextTick,onError:q,configure:function(e){if(e.baseUrl&&"/"!==e.baseUrl.charAt(e.baseUrl.length-1)&&(e.baseUrl+="/"),"string"==typeof e.urlArgs){var t=e.urlArgs;e.urlArgs=function(e,n){return(-1===n.indexOf("?")?"?":"&")+t}}var n=o.shim,r={paths:!0,bundles:!0,config:!0,map:!0};eachProp(e,function(e,t){r[t]?(o[t]||(o[t]={}),mixin(o[t],e,!0,!0)):o[t]=e}),e.bundles&&eachProp(e.bundles,function(e,t){each(e,function(e){e!==t&&(p[e]=t)})}),e.shim&&(eachProp(e.shim,function(e,t){isArray(e)&&(e={deps:e}),!e.exports&&!e.init||e.exportsFn||(e.exportsFn=i.makeShimExports(e)),n[t]=e}),o.shim=n),e.packages&&each(e.packages,function(e){var t;t=(e="string"==typeof e?{name:e}:e).name,e.location&&(o.paths[t]=e.location),o.pkgs[t]=e.name+"/"+(e.main||"main").replace(currDirRegExp,"").replace(jsSuffixRegExp,"")}),eachProp(s,function(e,t){e.inited||e.map.unnormalized||(e.map=y(t,null,!0))}),(e.deps||e.callback)&&i.require(e.deps||[],e.callback)},makeShimExports:function(e){return function(){var t;return e.init&&(t=e.init.apply(global,arguments)),t||e.exports&&getGlobal(e.exports)}},makeRequire:function(t,n){function a(o,c,u){var l,f;return n.enableBuildCallback&&c&&isFunction(c)&&(c.__requireJsBuild=!0),"string"==typeof o?isFunction(c)?q(makeError("requireargs","Invalid require call"),u):t&&hasProp(r,o)?r[o](s[t.id]):req.get?req.get(i,o,t,a):(l=y(o,t,!1,!0).id,hasProp(d,l)?d[l]:q(makeError("notloaded",'Module name "'+l+'" has not been loaded yet for context: '+e+(t?"":". Use require([])")))):($(),i.nextTick(function(){$(),(f=w(y(null,t))).skipMap=n.skipMap,f.init(o,c,u,{enabled:!0}),M()}),a)}return n=n||{},mixin(a,{isBrowser:isBrowser,toUrl:function(e){var n,r=e.lastIndexOf("."),a=e.split("/")[0];return-1!==r&&(!("."===a||".."===a)||r>1)&&(n=e.substring(r,e.length),e=e.substring(0,r)),i.nameToUrl(g(e,t&&t.id,!0),n,!0)},defined:function(e){return hasProp(d,y(e,t,!1,!0).id)},specified:function(e){return e=y(e,t,!1,!0).id,hasProp(d,e)||hasProp(s,e)}}),t||(a.undef=function(e){E();var n=y(e,t,!0),r=getOwn(s,e);r.undefed=!0,v(e),delete d[e],delete f[n.url],delete u[e],eachReverse(l,function(t,n){t[0]===e&&l.splice(n,1)}),delete i.defQueueMap[e],r&&(r.events.defined&&(u[e]=r.events),A(e))}),a},enable:function(e){getOwn(s,e.id)&&w(e).enable()},completeLoad:function(e){var t,n,r,a=getOwn(o.shim,e)||{},c=a.exports;for(E();l.length;){if(null===(n=l.shift())[0]){if(n[0]=e,t)break;t=!0}else n[0]===e&&(t=!0);j(n)}if(i.defQueueMap={},r=getOwn(s,e),!t&&!hasProp(d,e)&&r&&!r.inited){if(!(!o.enforceDefine||c&&getGlobal(c)))return x(e)?void 0:q(makeError("nodefine","No define call for "+e,null,[e]));j([e,a.deps||[],a.exportsFn])}M()},nameToUrl:function(e,t,n){var r,a,s,c,u,l,d=getOwn(o.pkgs,e);if(d&&(e=d),l=getOwn(p,e))return i.nameToUrl(l,t,n);if(req.jsExtRegExp.test(e))c=e+(t||"");else{for(r=o.paths,s=(a=e.split("/")).length;s>0;s-=1)if(u=getOwn(r,a.slice(0,s).join("/"))){isArray(u)&&(u=u[0]),a.splice(0,s,u);break}c=a.join("/"),c=("/"===(c+=t||(/^data\:|^blob\:|\?/.test(c)||n?"":".js")).charAt(0)||c.match(/^[\w\+\.\-]+:/)?"":o.baseUrl)+c}return o.urlArgs&&!/^blob\:/.test(c)?c+o.urlArgs(e,c):c},load:function(e,t){req.load(i,e,t)},execCb:function(e,t,n,i){return t.apply(i,n)},onScriptLoad:function(e){if("load"===e.type||readyRegExp.test((e.currentTarget||e.srcElement).readyState)){interactiveScript=null;var t=S(e);i.completeLoad(t.id)}},onScriptError:function(e){var t=S(e);if(!x(t.id)){var n=[];return eachProp(s,function(e,i){0!==i.indexOf("_@r")&&each(e.depMaps,function(e){if(e.id===t.id)return n.push(i),!0})}),q(makeError("scripterror",'Script error for "'+t.id+(n.length?'", needed by: '+n.join(", "):'"'),e,[t.id]))}}}).require=i.makeRequire(),i}function getInteractiveScript(){return interactiveScript&&"interactive"===interactiveScript.readyState?interactiveScript:(eachReverse(scripts(),function(e){if("interactive"===e.readyState)return interactiveScript=e}),interactiveScript)}}(this,"undefined"==typeof setTimeout?void 0:setTimeout);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
